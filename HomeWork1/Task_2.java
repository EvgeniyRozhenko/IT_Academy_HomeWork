package HomeWork1;

/* 2. Изучить приоритетность операторов по прикреплённой таблице (https://i.stack.imgur.com/kQdPe.png).
Сначала посчитать результаты всех ниже приведённых примеров устно, а потом проверить в IDE
(в случае ошибок свериться с таблицой приоритетов, повторять просчёт примеров до полного соотвествия).
Результатом МОЖЕТ БЫТЬ ОШИБКА компиляции, может быть ошибка выполнения программы или корректный результат.
Все значения в этих переменных должны быть записаны в int и boolean переменные.
Напротив каждой строчки нужно написать комментарий с результатом и объяснением почему вы получили такой результат.
2.1 5 + 2 / 8
2.2 (5 + 2) / 8
2.3 (5 + 2++) / 8
2.4 (5 + 2++) / --8
2.5 (5 * 2 >> 2++) / --8
2.6 (5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --8
2.7 (5 + 7 > 20 ? 68 => 68 : 22 * 2 >> 2++) / --8
2.8 6 - 2 > 3 && 12 * 12 <= 119
2.9 true && false
*/

public class Task_2 {
    public static void method1() {
        int a = 5;
        int b = 2;
        int c = 8;
        System.out.println("1-е:" + " " + (a + b / c)); //приор: снач "/",потом "+".При каждом решении уравнений, исп-я
        //целочисленные числа, отбрасываем дробные.
    }
    public static void method2(){
        int a = 5;
        int b = 2;
        int c = 8;
        System.out.println("2-е:" + " " + ((a + b) / c)); //"+ в скобках", потом "/".
    }
    public static void method3(){
        int a = 5;
        int b = 2;
        int c = 8;
        System.out.println("3-е:" + " " + ((a + b++) /c)); //"+ в скобках", потом "/", а "++" исп. в след. уравнении.
    }
    public static void method4(){
        int a = 5;
        int b = 2;
        int c = 8;
        System.out.println("4-е:" + " " + ((a + b++) / --c)); //исп."++" к b2 с пред.уравнения,"+ в скобках",
        // потом "--" и "/",а новое "++" исп. в след. уравнении.
    }
    public static void method5(){
        int a = 5;
        int b = 2;
        int c = 2;
        int d = 8;
        System.out.println("5-е:" + " " + ((a * b >> c++) / --d)); //"* в скобках",исп."++" к b2 с пред.уравнения,
        //потом ">> в скобках","--", а потом "/"
        //новое "++" исп. в след. уравнении.
    }
    public static void method6(){
        int a = 5;
        int b = 2;
        int b2 = 2;
        int c = 8;
        int d = 7;
        int e = 20;
        int f = 68;
        int g = 22;
        System.out.println("6-е:" + " " + ((a + d > e ? f : g * b >> b2++) / --c)); //"+ в скобках",проверяем ">"-false,
        //значит реш. 2ю часть урав-ния после ":",то есть"*",
        //потом исп."++" к b2 с пред.уравнения, ">>","--" и
        // "/", "++" исп. в след. уравнении.
    }
    public static void method7(){
        // 7-е уравнение идёт с ошибкой (a + d > e ? f => f : g * b >> b2++) / --c): Во-первых вместо "=>" должно быть ">="
        // по записи; Во-вторых в уравнении идёт 2 типа int и boolean - компилятор java не может сопоставить их.
        // "a + d > e ? f => f :" -является логическим решением уравнения, поэтому получаем мы true, либо false.
        // В "g * b >> b2++" мы получаем целочисленное значение. Решаем. Сначала выполняем решение в в скобках. "+", исп-я
        // ">" срав-ем - false, значит решаем 2ю часть урав-ния после ":", т.е. сначала "*",потом исп."++" к b2 с предыдущ.
        // уравнения и бинарная операция ">>" - получаем целочисленное значение 0. Теперь "--" - с=4. И должны исп. "/", но
        // java конфликтует, т.к. явл-ся строго типизированным языком. Наше уравнение сейчас выглядит так:
        // (false ? true : 0) / 4  По идее мы должны делить 0 на 4 и получить 0. Но java из-за скобок не может понять какой
        // тип делить - логический или целочисленный. Тем более что false\true / 4 мы не можем (в java булеан не переводится
        // в численное значение). Java считает, что наше уравнение написано неверно...
    }
    public static void method8(){
        int b = 2;
        int h = 6;
        int i = 3;
        int j = 12;
        int k= 119;
        System.out.println("8-е:" + " " + (h - b > i && j * j <= k)); //"-",потом ">"-true,потом "*" во второй половине
        // уравнения и "<="-false. Теперь наше уравнение выглядит так - true && false. Исп. логическую "&&"- получаем false
        // (т.к. при исп-нии & и &&, если один из операндов даёт false, то и результат будет false).
    }
    public static void method9(){
        System.out.println("9-е:" + " " + (true&&false)); // даёт нам вывод false,потому что есть один false (как и в 8-м
        // уравнении).
    }

    public static void main (String [] args) {  // объявляем метод main для входа.
        Task_2.method1();
        Task_2.method2();
        Task_2.method3();
        Task_2.method4();
        Task_2.method5();
        Task_2.method6();
        Task_2.method7();
        Task_2.method8();
        Task_2.method9();
    }
}
