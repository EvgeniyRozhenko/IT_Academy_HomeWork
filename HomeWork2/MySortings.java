package HomeWork2;
/*3. Выполнить сортировку массива с числами:
 3.1 пузырьком
 3.2 выбором
 3.3 Сортировка методов Шейкера.
 UPDATED!
 4.* Выполнить сортировку массива с числами. !!!!ВНИМАНИЕ!!!! код сортировок в данном ДЗ не должен дублироваться и
не должен находиться в main. Дублирование кода сортировок приведёт к провалу выполнения данного задания.
Итогом выполнения данного задания будет 1 класс который содержит методы с сортировками, и 1 класс из которого вызываются
данные методы:
4.1. После каждой сортировки в консоли у вас должно получиться "[Какой массив был до сортировки] ->
[Каким стал массив после сортировки]". Для преобразования массива в текст можно использовать класс Arrays.
4.2. Пишем следующие алгоритмы:
	4.2.1. Пузырьковая сортировка
	4.2.2. Шейкерная сортировка
4.3. Для тестов используем предварительно созданные массивы (в коде ваши тесты должны остаться):
	4.3.1. {1,2,3,4,5,6}
	4.3.2. {1,1,1,1}
	4.3.3. {9,1,5,99,9,9}
	4.3.4. {}
4.4. После тестов написать код который будет создавать массив рандомной длинны, заполнять массив рандомными числами.
Отсортировать.
4.5. После рандома написать код который будет создавать массив руками через консоль. Отсортировать.
 */

import java.util.Random;
import java.util.Scanner;

public class MySortings {

    public static int[] ArrayByConsole(){
        Scanner input = new Scanner(System.in);
        System.out.println("Введите длину массива");
        int [] array = new int[input.nextInt()];
        System.out.println("Введите " + array.length + " элементов массива:");
        for (int i = 0; i < array.length; i++){
            System.out.println("Введите элемент массива");
            array[i] = input.nextInt();
        }
        return array;
    }

    /** создание массива со случайными элементами
     * @return созданный массив
     */
    public static int[] randomArray(){
        Random nums = new Random(); // Созд. переменную с классом Random для генерации псевдослучайных чисел.
        int [] array = new int[nums.nextInt(11)]; // Создаём массив с 10-ю элементами.
        for (int i = 0; i < array.length; i++){  // Заполняем массив случайными числами и выводим в консоль.
            array[i] = nums.nextInt(13);  // Задаём макс. радиус для генер.чисел. От 0 до 12.
        }
        return array;
    }

    /** сортировка методо пузырька
     * @param array переданный массив чисел
     * @return отсортированный массив
     */
    public static int[] bubbleMethod(int [] array){
        boolean sorted = false; // Создаём булиновскую переменную - будет показателем отсортирован массив или нет.
        while (!sorted) {       // Т.к. мы не знаем сколько циклов нам нужно для сортировки исп. while с условием.
            sorted = true;
            for (int i = 0; i < array.length-1; i++) { // Т.к. мы сравниваем попарно 2 элемента (i и i+1), чтоб не выйти
                if(array[i] > array[i+1]){          // за пределы массива, делаем на 1 цикл меньше (array.length-1).
                    sorted = false;         // В случае, если бул.переменная =false, делаем перестановку пары элементов.
                    int cache = array[i];        // Обмен между 2-мя переменными с использованием третьей буферной.
                    array[i] = array[i+1];
                    array[i+1] = cache;
                }
            }
        }
        return array;
    }

    /** сортировка методом выбора
     * @param array переданный массив чисел
     * @return отсортированный массив
     */
    public static int[] selectionMethod(int [] array){
        for (int i = 0; i < array.length; i++) { // Цикл для сравнения минимального элемента с первым элементом
            // неотсортированного массива.
            int min = i;
            for (int j = i+1; j < array.length; j++) {
                if (array[j] < array[min]) {
                    min = j;
                }
            }
            if (min != i){  // Условие при котором идёт сравнени двух элементов массива.
                int cache = array[i]; // Обмен между 2-мя переменными с использованием третьей буферной.
                array[i] = array[min];
                array[min] = cache;
            }
        }
        return array;
    }

    /** сеортировка методом шейкера
     * @param array переданный массив чисел
     * @return отсортированный массив
     */
    public static int[] shakerMethod(int[] array){
        int leftSide = 0, rightSide = array.length - 1; // Сортировка массива Шейкером
        int temp;

        do {
            for (int i = leftSide; i < rightSide; i++){ // Сортировка идёт вправо, ищем макс. значение

                if (array[i] > array[i + 1]) {
                    temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                }
            }
            rightSide--; // Уменьшаем количество проходов
            for (int i = rightSide; i > leftSide; i--){ // Сортируем уже в обратную сторону и ищём миним. значение
                if (array[i] < array[i - 1]){
                    temp = array[i];
                    array[i] = array[i - 1];
                    array[i - 1] = temp;
                }
            }
            leftSide++; // Уменьшаем количество проходов, т.к. мы шли с конца

        } while (leftSide < rightSide); // Условие при котором будут происходить прохождения
        return array;
    }
}
